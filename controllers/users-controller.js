//const { v4: uuidv4 } = require("uuid");
const { validationResult } = require("express-validator");
const bcrypt = require("bcryptjs");
const jsonWebToken = require("jsonwebtoken");

const HttpError = require("../models/http-error");
const UserModule = require("../models/user");

/*Here I generate a token for a user that signs up and when he logs in */

const getUsers = async (req, res, next) => {
  console.log("GET USERS");
  let users;
  try {
    users = await UserModule.find({}, "-password"); // we dont want to return passwords!
  } catch (err) {
    const error = new HttpError(
      "Fetching users failed, please try again.",
      500
    );
    return next(error);
  }
  res.json({ users: users.map((user) => user.toObject({ getters: true })) });
};

// SIGNUP
const signup = async (req, res, next) => {
  console.log("SIGNUP");
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    // We have errors
    const invalidParam = errors.array()[0].param;
    const error = new HttpError(
      `Invalid  ${invalidParam} , please check your data`,
      422
    );
    return next(error);
  }

  const { name, email, password } = req.body; //see if work now with formData
  // Check if this user already exist
  let existingUser;
  try {
    existingUser = await UserModule.findOne({ email: email });
  } catch (err) {
    const error = new HttpError("Signing up failed, please try again.", 500);
    return next(error);
  }

  if (existingUser) {
    const error = new HttpError(
      "User already exist, please login instead.",
      422
    );
    return next(error);
  }

  let hashedPassword;
  /*a salt is a value generated by a cryptographically secure function 
  that is added to the input of hash functions to create unique
  hashes for every input, regardless of the input not being unique. 
  So if 2 users enter the same password it will generate a different hashedPassword */
  const saltLength = 12;
  try {
    hashedPassword = await bcrypt.hash(password, saltLength);
  } catch (err) {
    console.log(err.message);
    const error = new HttpError(
      "Could not create user, please try again.",
      500
    );
    return next(error);
  }

  const createdUser = new UserModule({
    name,
    email,
    image: req.file.path,
    password: hashedPassword,
    places: [],
  });

  //store user in database
  try {
    await createdUser.save(); //id created by mongoose*
  } catch (err) {
    const error = new HttpError("Signing up failed, please try again.", 500);
    return next(error);
  }
  console.log("Backend - user is sign in!");
  //Generate a TOKEN (with id created by mongoose*) to send to server instead of the entire user object
  let token;
  try {
    token = jsonWebToken.sign(
      { userId: createdUser.id, email: createdUser.email },
      "private_key_dont_share",
      { expiresIn: "1h" }
    );
  } catch (err) {
    const error = new HttpError("Signing up failed, please try again.", 500);
    return next(error);
  }
  res
    .status(201)
    .json({ userId: createdUser.id, email: createdUser.email, token: token });
};

// LOGIN
const login = async (req, res, next) => {
  console.log("LOGIN");
  const { email, password } = req.body;
  console.log(`EMAIL: ${email} PASSWORD: ${password}`);
  let user;
  try {
    user = await UserModule.findOne({ email: email });
  } catch (errr) {
    const error = new HttpError("Logging in failed, please try again.", 500);
    return next(error);
  }

  if (!user) {
    return next(
      new HttpError(
        "Could not identify user, credentials (email) seem to be wrong",
        403
      )
    );
  }

  let isValidPassword = false;
  // compare the password user sends to the hashed one (user.password) in database
  try {
    isValidPassword = await bcrypt.compare(password, user.password);
  } catch (err) {
    return next(
      new HttpError(
        "Could not log you in, please check your credentials (password) and try again.",
        500
      )
    );
  }
  if (!isValidPassword) {
    return next(
      new HttpError(
        "Could not identify user password, please try another one.",
        403
      )
    );
  }
  //Generate a TOKEN with the SAME private key as signup so the server can validate it
  let token;
  try {
    token = jsonWebToken.sign(
      { userId: user.id, email: user.email },
      "private_key_dont_share",
      { expiresIn: "1h" }
    );
  } catch (err) {
    const error = new HttpError("Log in failed, please try again.", 500);
    return next(error);
  }
  res.status(201).json({ userId: user.id, email: user.email, token: token });
};

exports.getUsers = getUsers;
exports.signup = signup;
exports.login = login;
